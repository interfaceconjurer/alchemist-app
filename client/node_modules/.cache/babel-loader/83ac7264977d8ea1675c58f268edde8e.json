{"ast":null,"code":"import _classCallCheck from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/j.wright/SF-main-repo/alchemist-app/src/components/alchemySymbol/mediator.js\";\nimport React, { Component } from 'react';\nimport symbols from '../symbols/symbols';\nimport View from './view';\nimport Helper from './helper';\n\nvar AlchemySymbol =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AlchemySymbol, _Component);\n\n  function AlchemySymbol() {\n    var _this;\n\n    _classCallCheck(this, AlchemySymbol);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AlchemySymbol).call(this));\n\n    _this.logScroll = function (symbolHeight) {\n      // symbol is OUT of view\n      if (window.scrollY > symbolHeight && _this.symbolInView) {\n        _this.symbolInView = false;\n\n        if (_this.exitAnimation) {\n          clearTimeout(_this.symbolTimeOutFunc);\n\n          _this.exitAnimation(_this.symbolElement);\n        } // symbol is IN of view\n\n      } else if (window.scrollY < symbolHeight && !_this.symbolInView) {\n        _this.symbolInView = true;\n\n        _this.updateSymbolIndex();\n      }\n    };\n\n    _this.state = {\n      symbolsIndex: 1\n    };\n    _this.symbolInView = true;\n    _this.symbolTimeOutFunc = null;\n    _this.exitAnimation = null;\n    return _this;\n  }\n\n  _createClass(AlchemySymbol, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var runExecution = function runExecution() {\n        _this2.animateSvg();\n\n        _this2.symbolElement.addEventListener('load', _this2.animateSvg.bind(_this2));\n\n        window.onscroll = _this2.logScroll.bind(_this2, _this2.symbolElement.offsetHeight);\n      };\n\n      window.addEventListener(\"load\", runExecution);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.onscroll = null;\n    }\n  }, {\n    key: \"updateSymbolIndex\",\n    value: function updateSymbolIndex() {\n      if (this.symbolInView) {\n        var newIndex;\n        symbols[this.state.symbolsIndex + 1] ? newIndex = this.state.symbolsIndex + 1 : newIndex = 1;\n        this.setState({\n          symbolsIndex: newIndex\n        });\n      }\n    }\n  }, {\n    key: \"animateSvg\",\n    value: function animateSvg() {\n      this.exitAnimation = Helper.animateSymbol(this.symbolElement, this.state.symbolsIndex, this.updateSymbolIndex.bind(this));\n      this.symbolTimeOutFunc = setTimeout(this.exitAnimation.bind(this, this.symbolElement), 8000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(View, {\n        symbolElement: function symbolElement(node) {\n          return _this3.symbolElement = node;\n        },\n        symbol: symbols[this.state.symbolsIndex],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AlchemySymbol;\n}(Component);\n\nexport default AlchemySymbol;","map":{"version":3,"sources":["/Users/j.wright/SF-main-repo/alchemist-app/src/components/alchemySymbol/mediator.js"],"names":["React","Component","symbols","View","Helper","AlchemySymbol","logScroll","symbolHeight","window","scrollY","symbolInView","exitAnimation","clearTimeout","symbolTimeOutFunc","symbolElement","updateSymbolIndex","state","symbolsIndex","runExecution","animateSvg","addEventListener","bind","onscroll","offsetHeight","newIndex","setState","animateSymbol","setTimeout","node"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEMC,a;;;;;AACJ,2BAAc;AAAA;;AAAA;;AACZ;;AADY,UAwBdC,SAxBc,GAwBF,UAACC,YAAD,EAAkB;AAC5B;AACA,UAAGC,MAAM,CAACC,OAAP,GAAiBF,YAAjB,IAAiC,MAAKG,YAAzC,EAAsD;AACpD,cAAKA,YAAL,GAAoB,KAApB;;AACA,YAAG,MAAKC,aAAR,EAAsB;AACpBC,UAAAA,YAAY,CAAC,MAAKC,iBAAN,CAAZ;;AACA,gBAAKF,aAAL,CAAmB,MAAKG,aAAxB;AACD,SALmD,CAMtD;;AACC,OAPD,MAOO,IAAGN,MAAM,CAACC,OAAP,GAAiBF,YAAjB,IAAiC,CAAC,MAAKG,YAA1C,EAAuD;AAC5D,cAAKA,YAAL,GAAoB,IAApB;;AACA,cAAKK,iBAAL;AACD;AACF,KArCa;;AAEZ,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AADH,KAAb;AAGA,UAAKP,YAAL,GAAoB,IAApB;AACA,UAAKG,iBAAL,GAAyB,IAAzB;AACA,UAAKF,aAAL,GAAqB,IAArB;AAPY;AAQb;;;;wCAEmB;AAAA;;AAClB,UAAMO,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAA,MAAI,CAACC,UAAL;;AACA,QAAA,MAAI,CAACL,aAAL,CAAmBM,gBAAnB,CAAoC,MAApC,EAA4C,MAAI,CAACD,UAAL,CAAgBE,IAAhB,CAAqB,MAArB,CAA5C;;AACAb,QAAAA,MAAM,CAACc,QAAP,GAAkB,MAAI,CAAChB,SAAL,CAAee,IAAf,CAAoB,MAApB,EAA0B,MAAI,CAACP,aAAL,CAAmBS,YAA7C,CAAlB;AACD,OAJD;;AAKAf,MAAAA,MAAM,CAACY,gBAAP,CAAwB,MAAxB,EAAgCF,YAAhC;AAED;;;2CAEqB;AACpBV,MAAAA,MAAM,CAACc,QAAP,GAAkB,IAAlB;AACD;;;wCAiBmB;AAClB,UAAG,KAAKZ,YAAR,EAAqB;AACnB,YAAIc,QAAJ;AACAtB,QAAAA,OAAO,CAAC,KAAKc,KAAL,CAAWC,YAAX,GAA0B,CAA3B,CAAP,GAAuCO,QAAQ,GAAG,KAAKR,KAAL,CAAWC,YAAX,GAA0B,CAA5E,GAAgFO,QAAQ,GAAG,CAA3F;AACA,aAAKC,QAAL,CAAc;AACZR,UAAAA,YAAY,EAAEO;AADF,SAAd;AAGD;AACF;;;iCAEY;AACX,WAAKb,aAAL,GAAqBP,MAAM,CAACsB,aAAP,CAAqB,KAAKZ,aAA1B,EAAyC,KAAKE,KAAL,CAAWC,YAApD,EAAkE,KAAKF,iBAAL,CAAuBM,IAAvB,CAA4B,IAA5B,CAAlE,CAArB;AACA,WAAKR,iBAAL,GAAyBc,UAAU,CAAC,KAAKhB,aAAL,CAAmBU,IAAnB,CAAwB,IAAxB,EAA8B,KAAKP,aAAnC,CAAD,EAAoD,IAApD,CAAnC;AACD;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAE,uBAAAc,IAAI;AAAA,iBAAI,MAAI,CAACd,aAAL,GAAqBc,IAAzB;AAAA,SAAzB;AAAwD,QAAA,MAAM,EAAE1B,OAAO,CAAC,KAAKc,KAAL,CAAWC,YAAZ,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EA3DyBhB,S;;AA8D5B,eAAeI,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport symbols from '../symbols/symbols';\nimport View from './view';\nimport Helper from './helper';\n\nclass AlchemySymbol extends Component {\n  constructor() {\n    super();\n    this.state = {\n      symbolsIndex: 1\n    }\n    this.symbolInView = true;\n    this.symbolTimeOutFunc = null;\n    this.exitAnimation = null;\n  }\n\n  componentDidMount() {\n    const runExecution = () => {\n      this.animateSvg();\n      this.symbolElement.addEventListener('load', this.animateSvg.bind(this));\n      window.onscroll = this.logScroll.bind(this, this.symbolElement.offsetHeight);\n    }\n    window.addEventListener(\"load\", runExecution);\n\n  }\n\n  componentWillUnmount(){\n    window.onscroll = null;\n  }\n\n  logScroll = (symbolHeight) => {\n    // symbol is OUT of view\n    if(window.scrollY > symbolHeight && this.symbolInView){\n      this.symbolInView = false;\n      if(this.exitAnimation){\n        clearTimeout(this.symbolTimeOutFunc);\n        this.exitAnimation(this.symbolElement);\n      }\n    // symbol is IN of view\n    } else if(window.scrollY < symbolHeight && !this.symbolInView){\n      this.symbolInView = true;\n      this.updateSymbolIndex();\n    }\n  }\n\n  updateSymbolIndex() {\n    if(this.symbolInView){\n      let newIndex;\n      symbols[this.state.symbolsIndex + 1] ? newIndex = this.state.symbolsIndex + 1 : newIndex = 1;\n      this.setState({\n        symbolsIndex: newIndex\n      });\n    }\n  }\n\n  animateSvg() {\n    this.exitAnimation = Helper.animateSymbol(this.symbolElement, this.state.symbolsIndex, this.updateSymbolIndex.bind(this));\n    this.symbolTimeOutFunc = setTimeout(this.exitAnimation.bind(this, this.symbolElement) ,8000);  \n  }\n\n  render() {\n    return (\n      <View symbolElement={node => this.symbolElement = node} symbol={symbols[this.state.symbolsIndex]}/>\n    );\n  }\n}\n\nexport default AlchemySymbol;"]},"metadata":{},"sourceType":"module"}