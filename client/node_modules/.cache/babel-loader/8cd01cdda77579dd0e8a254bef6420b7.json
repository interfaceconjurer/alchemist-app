{"ast":null,"code":"import tabindexValue from '../util/tabindex-value';\nexport default function (elements) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.tabIndex\n  // elements with tabIndex \"0\" (including tabbableElements without tabIndex) should be navigated in the order they appear.\n  // elements with a positive tabIndex:\n  //   Elements that have identical tabIndexes should be navigated in the order they appear.\n  //   Navigation proceeds from the lowest tabIndex to the highest tabIndex.\n  // NOTE: sort implementation may be unstable and thus mess up DOM order,\n  // that's why we build a map that's being sorted instead. If we were able to rely\n  // on a stable sorting algorithm, sortTabindex() could be as simple as\n  // elements.sort(function(a, b) { return a.tabIndex - b.tabIndex; });\n  // at this time Chrome does not use a stable sorting algorithm\n  // see http://blog.rodneyrehm.de/archives/14-Sorting-Were-Doing-It-Wrong.html#stability\n  // NOTE: compareDocumentPosition seemed like more overhead than just sorting this with buckets\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node.compareDocumentPosition\n  var map = {};\n  var indexes = [];\n  var normal = elements.filter(function (element) {\n    // in Trident and Gecko SVGElement does not know about the tabIndex property\n    var tabIndex = element.tabIndex;\n\n    if (tabIndex === undefined) {\n      tabIndex = tabindexValue(element);\n    } // extract elements that don't need sorting\n\n\n    if (tabIndex <= 0 || tabIndex === null || tabIndex === undefined) {\n      return true;\n    }\n\n    if (!map[tabIndex]) {\n      // create sortable bucket for dom-order-preservation of elements with the same tabIndex\n      map[tabIndex] = []; // maintain a list of unique tabIndexes\n\n      indexes.push(tabIndex);\n    } // sort element into the proper bucket\n\n\n    map[tabIndex].push(element); // element moved to sorting map, so not \"normal\" anymore\n\n    return false;\n  }); // sort the tabindex ascending,\n  // then resolve them to their appropriate buckets,\n  // then flatten the array of arrays to an array\n\n  var _elements = indexes.sort().map(function (tabIndex) {\n    return map[tabIndex];\n  }).reduceRight(function (previous, current) {\n    return current.concat(previous);\n  }, normal);\n\n  return _elements;\n}","map":null,"metadata":{},"sourceType":"module"}