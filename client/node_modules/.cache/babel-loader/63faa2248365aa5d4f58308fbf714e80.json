{"ast":null,"code":"/*\n  Utility to make any element inert (disabled). Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard - and thus not receive focus.\n\n  Elements made inert (disabled) by this utility are given the attribute [data-ally-disabled=\"true\"].\n\n  ---------------\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\nimport contextToElement from '../util/context-to-element';\nimport tabindexValue from '../util/tabindex-value';\nimport isNativeDisabledSupported from '../is/native-disabled-supported';\nimport toggleAttribute from '../util/toggle-attribute';\nimport toggleAttributeValue from '../util/toggle-attribute-value';\nimport logger from '../util/logger';\nimport _supports from '../supports/supports';\nvar supports;\n\nfunction disabledFocus() {\n  logger.warn('trying to focus inert element', this);\n}\n\nfunction disableTabindex(element, disabledState) {\n  if (disabledState) {\n    var tabIndex = tabindexValue(element);\n    toggleAttributeValue({\n      element: element,\n      attribute: 'tabindex',\n      temporaryValue: '-1',\n      saveValue: tabIndex !== null ? tabIndex : ''\n    });\n  } else {\n    toggleAttributeValue({\n      element: element,\n      attribute: 'tabindex'\n    });\n  }\n}\n\nfunction disableVideoControls(element, disabledState) {\n  toggleAttribute({\n    element: element,\n    attribute: 'controls',\n    remove: disabledState\n  });\n}\n\nfunction disableSvgFocusable(element, disabledState) {\n  toggleAttributeValue({\n    element: element,\n    attribute: 'focusable',\n    temporaryValue: disabledState ? 'false' : undefined\n  });\n}\n\nfunction disableSvgLink(element, disabledState) {\n  toggleAttribute({\n    element: element,\n    attribute: 'xlink:href',\n    remove: disabledState\n  });\n}\n\nfunction setAriaDisabled(element, disabledState) {\n  toggleAttributeValue({\n    element: element,\n    attribute: 'aria-disabled',\n    temporaryValue: disabledState ? 'true' : undefined\n  });\n}\n\nfunction disableScriptFocus(element, disabledState) {\n  if (disabledState) {\n    // make sure no script can focus the element\n    element.focus = disabledFocus;\n  } else {\n    // restore original focus function from prototype\n    delete element.focus;\n  }\n}\n\nfunction disablePointerEvents(element, disabledState) {\n  if (disabledState) {\n    // remember previous pointer events status so we can restore it\n    var pointerEvents = element.style.pointerEvents || '';\n    element.setAttribute('data-inert-pointer-events', pointerEvents); // make sure no pointer interaction can access the element\n\n    element.style.pointerEvents = 'none';\n  } else {\n    // restore to previous pointer interaction status\n    var _pointerEvents = element.getAttribute('data-inert-pointer-events');\n\n    element.removeAttribute('data-inert-pointer-events');\n    element.style.pointerEvents = _pointerEvents;\n  }\n}\n\nfunction setElementDisabled(element, disabledState) {\n  setAriaDisabled(element, disabledState);\n  disableTabindex(element, disabledState);\n  disableScriptFocus(element, disabledState);\n  disablePointerEvents(element, disabledState);\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName === 'video' || nodeName === 'audio') {\n    // Blink and Gecko leave <video controls tabindex=\"-1\"> in document focus navigation sequence\n    // Blink leaves <audio controls tabindex=\"-1\"> in document focus navigation sequence\n    disableVideoControls(element, disabledState);\n  }\n\n  if (nodeName === 'svg' || element.ownerSVGElement) {\n    if (supports.focusSvgFocusableAttribute) {\n      // Internet Explorer knows focusable=\"false\" instead of tabindex=\"-1\"\n      disableSvgFocusable(element, disabledState);\n    } else if (!supports.focusSvgTabindexAttribute && nodeName === 'a') {\n      // Firefox neither knows focusable=\"false\" nor tabindex=\"-1\"\n      disableSvgLink(element, disabledState);\n    }\n  }\n\n  if (disabledState) {\n    element.setAttribute('data-ally-disabled', 'true');\n  } else {\n    element.removeAttribute('data-ally-disabled');\n  }\n}\n\nexport default function (context, disabledState) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var element = contextToElement({\n    label: 'element/disabled',\n    context: context\n  }); // accept truthy/falsy values\n\n  disabledState = Boolean(disabledState);\n  var currentState = element.hasAttribute('data-ally-disabled'); // if there's no value to set, we're running as a getter\n\n  var runningAsGetter = arguments.length === 1;\n\n  if (isNativeDisabledSupported(element)) {\n    if (runningAsGetter) {\n      return element.disabled;\n    } // form elements know the disabled attribute, which we shall use instead of our poor man's copy of it\n\n\n    element.disabled = disabledState;\n    return element;\n  }\n\n  if (runningAsGetter) {\n    return currentState;\n  }\n\n  if (currentState === disabledState) {\n    // no update necessary\n    return element;\n  }\n\n  setElementDisabled(element, disabledState);\n  return element;\n}","map":null,"metadata":{},"sourceType":"module"}