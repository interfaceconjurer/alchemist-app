{"ast":null,"code":"// determine if an <area> element is being properly used by and <img> via a <map>\nimport contextToElement from '../util/context-to-element';\nimport isVisible from './visible';\nimport getParents from '../get/parents';\nimport { getImageOfArea } from '../util/image-map';\nimport _supports from '../supports/supports';\nvar supports; // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-usemap\n// https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L88-L107\n\nexport default function (context) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var element = contextToElement({\n    label: 'is/valid-area',\n    context: context\n  });\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName !== 'area') {\n    return false;\n  }\n\n  var hasTabindex = element.hasAttribute('tabindex');\n\n  if (!supports.focusAreaTabindex && hasTabindex) {\n    // Blink and WebKit do not consider <area tabindex=\"-1\" href=\"#void\"> focusable\n    return false;\n  }\n\n  var img = getImageOfArea(element);\n\n  if (!img || !isVisible(img)) {\n    return false;\n  } // Firefox only allows fully loaded images to reference image maps\n  // https://stereochro.me/ideas/detecting-broken-images-js\n\n\n  if (!supports.focusBrokenImageMap && (!img.complete || !img.naturalHeight || img.offsetWidth <= 0 || img.offsetHeight <= 0)) {\n    return false;\n  } // Firefox supports.can focus area elements even if they don't have an href attribute\n\n\n  if (!supports.focusAreaWithoutHref && !element.href) {\n    // Internet explorer supports.can focus area elements without href if either\n    // the area element or the image element has a tabindex attribute\n    return supports.focusAreaTabindex && hasTabindex || supports.focusAreaImgTabindex && img.hasAttribute('tabindex');\n  } // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-usemap\n\n\n  var childOfInteractive = getParents({\n    context: img\n  }).slice(1).some(function (_element) {\n    var name = _element.nodeName.toLowerCase();\n\n    return name === 'button' || name === 'a';\n  });\n\n  if (childOfInteractive) {\n    return false;\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}