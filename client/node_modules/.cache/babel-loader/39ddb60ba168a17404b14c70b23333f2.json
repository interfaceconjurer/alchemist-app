{"ast":null,"code":"// determine if an element is rendered\n// NOTE: that does not mean an element is visible in the viewport, see util/visible-area\nimport findIndex from '../util/array-find-index';\nimport getParents from '../get/parents';\nimport contextToElement from '../util/context-to-element';\nimport getFrameElement from '../util/get-frame-element'; // https://www.w3.org/TR/html5/rendering.html#being-rendered\n// <area> is not rendered, but we *consider* it visible to simplfiy this function's usage\n\nvar notRenderedElementsPattern = /^(area)$/;\n\nfunction computedStyle(element, property) {\n  return window.getComputedStyle(element, null).getPropertyValue(property);\n}\n\nfunction notDisplayed(_path) {\n  return _path.some(function (element) {\n    // display:none is not visible (optimized away at layout)\n    return computedStyle(element, 'display') === 'none';\n  });\n}\n\nfunction notVisible(_path) {\n  // https://github.com/jquery/jquery-ui/blob/master/ui/core.js#L109-L114\n  // NOTE: a nested element can reverse visibility:hidden|collapse by explicitly setting visibility:visible\n  // NOTE: visibility can be [\"\", \"visible\", \"hidden\", \"collapse\"]\n  var hidden = findIndex(_path, function (element) {\n    var visibility = computedStyle(element, 'visibility');\n    return visibility === 'hidden' || visibility === 'collapse';\n  });\n\n  if (hidden === -1) {\n    // there is no hidden element\n    return false;\n  }\n\n  var visible = findIndex(_path, function (element) {\n    return computedStyle(element, 'visibility') === 'visible';\n  });\n\n  if (visible === -1) {\n    // there is no visible element (but a hidden element)\n    return true;\n  }\n\n  if (hidden < visible) {\n    // there is a hidden element and it's closer than the first visible element\n    return true;\n  } // there may be a hidden element, but the closest element is visible\n\n\n  return false;\n}\n\nfunction collapsedParent(_path) {\n  var offset = 1;\n\n  if (_path[0].nodeName.toLowerCase() === 'summary') {\n    offset = 2;\n  }\n\n  return _path.slice(offset).some(function (element) {\n    // \"content children\" of a closed details element are not visible\n    return element.nodeName.toLowerCase() === 'details' && element.open === false;\n  });\n}\n\nfunction isVisibleRules() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      _ref$except = _ref.except,\n      except = _ref$except === void 0 ? {\n    notRendered: false,\n    cssDisplay: false,\n    cssVisibility: false,\n    detailsElement: false,\n    browsingContext: false\n  } : _ref$except;\n\n  var element = contextToElement({\n    label: 'is/visible',\n    resolveDocument: true,\n    context: context\n  });\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (!except.notRendered && notRenderedElementsPattern.test(nodeName)) {\n    return true;\n  }\n\n  var _path = getParents({\n    context: element\n  }); // in Internet Explorer <audio> has a default display: none, where others have display: inline\n  // but IE allows focusing <audio style=\"display:none\">, but not <div display:none><audio>\n  // this is irrelevant to other browsers, as the controls attribute is required to make <audio> focusable\n\n\n  var isAudioWithoutControls = nodeName === 'audio' && !element.hasAttribute('controls');\n\n  if (!except.cssDisplay && notDisplayed(isAudioWithoutControls ? _path.slice(1) : _path)) {\n    return false;\n  }\n\n  if (!except.cssVisibility && notVisible(_path)) {\n    return false;\n  }\n\n  if (!except.detailsElement && collapsedParent(_path)) {\n    return false;\n  }\n\n  if (!except.browsingContext) {\n    // elements within a browsing context are affected by the\n    // browsing context host element's visibility and tabindex\n    var frameElement = getFrameElement(element);\n\n    var _isVisible = isVisibleRules.except(except);\n\n    if (frameElement && !_isVisible(frameElement)) {\n      return false;\n    }\n  }\n\n  return true;\n} // bind exceptions to an iterator callback\n\n\nisVisibleRules.except = function () {\n  var except = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isVisible = function isVisible(context) {\n    return isVisibleRules({\n      context: context,\n      except: except\n    });\n  };\n\n  isVisible.rules = isVisibleRules;\n  return isVisible;\n}; // provide isVisible(context) as default iterator callback\n\n\nvar isVisible = isVisibleRules.except({});\nexport default isVisible;","map":null,"metadata":{},"sourceType":"module"}