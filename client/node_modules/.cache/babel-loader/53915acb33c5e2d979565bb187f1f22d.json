{"ast":null,"code":"import _classCallCheck from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Utility to make a sub-tree of the DOM inert. Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard.\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\nimport nodeArray from '../util/node-array';\nimport queryFocusable from '../query/focusable';\nimport elementDisabled from '../element/disabled';\nimport observeShadowMutations from '../observe/shadow-mutations';\nimport { getParentComparator } from '../util/compare-position';\n\nfunction makeElementInert(element) {\n  return elementDisabled(element, true);\n}\n\nfunction undoElementInert(element) {\n  return elementDisabled(element, false);\n}\n\nvar observerConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true,\n  attributeFilter: ['tabindex', 'disabled', 'data-ally-disabled']\n};\n\nvar InertSubtree =\n/*#__PURE__*/\nfunction () {\n  function InertSubtree() {\n    var _this = this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        context = _ref.context,\n        filter = _ref.filter;\n\n    _classCallCheck(this, InertSubtree);\n\n    this._context = nodeArray(context || document.documentElement)[0];\n    this._filter = nodeArray(filter);\n    this._inertElementCache = [];\n    this.disengage = this.disengage.bind(this);\n    this.handleMutation = this.handleMutation.bind(this);\n    this.renderInert = this.renderInert.bind(this);\n    this.filterElements = this.filterElements.bind(this);\n    this.filterParentElements = this.filterParentElements.bind(this);\n    var focusable = queryFocusable({\n      context: this._context,\n      includeContext: true,\n      strategy: 'all'\n    });\n    this.renderInert(focusable);\n    this.shadowObserver = observeShadowMutations({\n      context: this._context,\n      config: observerConfig,\n      callback: function callback(mutations) {\n        return mutations.forEach(_this.handleMutation);\n      }\n    });\n  }\n\n  _createClass(InertSubtree, [{\n    key: \"disengage\",\n    value: function disengage() {\n      if (!this._context) {\n        return;\n      }\n\n      undoElementInert(this._context);\n\n      this._inertElementCache.forEach(function (element) {\n        return undoElementInert(element);\n      });\n\n      this._inertElementCache = null;\n      this._filter = null;\n      this._context = null;\n      this.shadowObserver && this.shadowObserver.disengage();\n      this.shadowObserver = null;\n    }\n  }, {\n    key: \"listQueryFocusable\",\n    value: function listQueryFocusable(list) {\n      return list // find all focusable elements within the given contexts\n      .map(function (element) {\n        return queryFocusable({\n          context: element,\n          includeContext: true,\n          strategy: 'all'\n        });\n      }) // flatten nested arrays\n      .reduce(function (previous, current) {\n        return previous.concat(current);\n      }, []);\n    }\n  }, {\n    key: \"renderInert\",\n    value: function renderInert(elements) {\n      var _this2 = this;\n\n      var makeInert = function makeInert(element) {\n        _this2._inertElementCache.push(element);\n\n        makeElementInert(element);\n      };\n\n      elements.filter(this.filterElements).filter(this.filterParentElements) // ignore elements that already are disabled\n      // so we don't enable them on disengage()\n      .filter(function (element) {\n        return !elementDisabled(element);\n      }).forEach(makeInert);\n    }\n  }, {\n    key: \"filterElements\",\n    value: function filterElements(element) {\n      // ignore elements within the exempted sub-trees\n      var isParentOfElement = getParentComparator({\n        element: element,\n        includeSelf: true\n      });\n      return !this._filter.some(isParentOfElement);\n    }\n  }, {\n    key: \"filterParentElements\",\n    value: function filterParentElements(element) {\n      // ignore ancestors of the exempted sub-trees\n      var isParentOfElement = getParentComparator({\n        parent: element\n      });\n      return !this._filter.some(isParentOfElement);\n    }\n  }, {\n    key: \"handleMutation\",\n    value: function handleMutation(mutation) {\n      if (mutation.type === 'childList') {\n        var addedElements = nodeArray(mutation.addedNodes).filter(function (element) {\n          return element.nodeType === Node.ELEMENT_NODE;\n        });\n\n        if (!addedElements.length) {\n          return;\n        }\n\n        var addedFocusableElements = this.listQueryFocusable(addedElements);\n        this.renderInert(addedFocusableElements);\n      } else if (mutation.type === 'attributes') {\n        this.renderInert([mutation.target]);\n      }\n    }\n  }]);\n\n  return InertSubtree;\n}();\n\nexport default function () {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref2.context,\n      filter = _ref2.filter;\n\n  var service = new InertSubtree({\n    context: context,\n    filter: filter\n  });\n  return {\n    disengage: service.disengage\n  };\n}","map":null,"metadata":{},"sourceType":"module"}