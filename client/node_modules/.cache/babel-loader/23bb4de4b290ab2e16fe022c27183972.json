{"ast":null,"code":"/*\n  decodes a key binding token to a JavaScript structure\n\n  returns an array of objects:\n    {\n      // key name translated to keyCode (possibly more than one)\n      keyCodes: [<number>],\n      // translated modifiers\n      modifiers: {\n        altKey: null,   // ignore\n        ctrKey: false,  // expect not pressed\n        metaKey: true,  // expect pressed\n        shiftKey: true, // expect pressed\n      },\n      // callback that returns true if event's\n      // modifier keys match the expected state\n      matchModifiers: function(event){},\n    }\n*/\nimport keycode from '../map/keycode';\nvar modifier = {\n  alt: 'altKey',\n  ctrl: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\nvar modifierSequence = Object.keys(modifier).map(function (name) {\n  return modifier[name];\n});\n\nfunction createExpectedModifiers(ignoreModifiers) {\n  var value = ignoreModifiers ? null : false;\n  return {\n    altKey: value,\n    ctrlKey: value,\n    metaKey: value,\n    shiftKey: value\n  };\n}\n\nfunction resolveModifiers(modifiers) {\n  var ignoreModifiers = modifiers.indexOf('*') !== -1;\n  var expected = createExpectedModifiers(ignoreModifiers);\n  modifiers.forEach(function (token) {\n    if (token === '*') {\n      // we've already covered the all-in operator\n      return;\n    } // we want the modifier pressed\n\n\n    var value = true;\n    var operator = token.slice(0, 1);\n\n    if (operator === '?') {\n      // we don't care if the modifier is pressed\n      value = null;\n    } else if (operator === '!') {\n      // we do not want the modifier pressed\n      value = false;\n    }\n\n    if (value !== true) {\n      // compensate for the modifier's operator\n      token = token.slice(1);\n    }\n\n    var propertyName = modifier[token];\n\n    if (!propertyName) {\n      throw new TypeError('Unknown modifier \"' + token + '\"');\n    }\n\n    expected[propertyName] = value;\n  });\n  return expected;\n}\n\nfunction resolveKey(key) {\n  var code = keycode[key] || parseInt(key, 10);\n\n  if (!code || typeof code !== 'number' || isNaN(code)) {\n    throw new TypeError('Unknown key \"' + key + '\"');\n  }\n\n  return [code].concat(keycode._alias[code] || []);\n}\n\nfunction matchModifiers(expected, event) {\n  // returns true on match\n  return !modifierSequence.some(function (prop) {\n    // returns true on mismatch\n    return typeof expected[prop] === 'boolean' && Boolean(event[prop]) !== expected[prop];\n  });\n}\n\nexport default function (text) {\n  return text.split(/\\s+/).map(function (_text) {\n    var tokens = _text.split('+');\n\n    var _modifiers = resolveModifiers(tokens.slice(0, -1));\n\n    var _keyCodes = resolveKey(tokens.slice(-1));\n\n    return {\n      keyCodes: _keyCodes,\n      modifiers: _modifiers,\n      matchModifiers: matchModifiers.bind(null, _modifiers)\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}