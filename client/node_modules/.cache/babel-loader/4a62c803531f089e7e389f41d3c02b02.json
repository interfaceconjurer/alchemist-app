{"ast":null,"code":"import _classCallCheck from \"/Users/j.wright/SF-main-repo/alchemist-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.wright/SF-main-repo/alchemist-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n// move <area> elements to the location of the <img> elements that reference them\nimport queryTabbable from './tabbable';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport getDocument from '../util/get-document';\nimport { getMapByName } from '../util/image-map';\n\nvar Maps =\n/*#__PURE__*/\nfunction () {\n  function Maps(context) {\n    _classCallCheck(this, Maps);\n\n    this._document = getDocument(context);\n    this.maps = {};\n  }\n\n  _createClass(Maps, [{\n    key: \"getAreasFor\",\n    value: function getAreasFor(name) {\n      if (!this.maps[name]) {\n        // the map is not defined within the context, so we\n        // have to go find it elsewhere in the document\n        this.addMapByName(name);\n      }\n\n      return this.maps[name];\n    }\n  }, {\n    key: \"addMapByName\",\n    value: function addMapByName(name) {\n      var map = getMapByName(name, this._document);\n\n      if (!map) {\n        // if there is no map, the img[usemap] wasn't doing anything anyway\n        return;\n      }\n\n      this.maps[map.name] = queryTabbable({\n        context: map\n      });\n    }\n  }, {\n    key: \"extractAreasFromList\",\n    value: function extractAreasFromList(elements) {\n      // remove all <area> elements from the elements list,\n      // but put them the map for later retrieval\n      return elements.filter(function (element) {\n        var nodeName = element.nodeName.toLowerCase();\n\n        if (nodeName !== 'area') {\n          return true;\n        }\n\n        var map = element.parentNode;\n\n        if (!this.maps[map.name]) {\n          this.maps[map.name] = [];\n        }\n\n        this.maps[map.name].push(element);\n        return false;\n      }, this);\n    }\n  }]);\n\n  return Maps;\n}();\n\nexport default function (elements, context) {\n  // images - unless they are focusable themselves, likely not\n  // part of the elements list, so we'll have to find them and\n  // sort them into the elements list manually\n  var usemaps = context.querySelectorAll('img[usemap]');\n  var maps = new Maps(context); // remove all <area> elements from the elements list,\n  // but put them the map for later retrieval\n\n  var _elements = maps.extractAreasFromList(elements);\n\n  if (!usemaps.length) {\n    // the context does not contain any <area>s so no need\n    // to replace anything, just remove any maps\n    return _elements;\n  }\n\n  return mergeInDomOrder({\n    list: _elements,\n    elements: usemaps,\n    resolveElement: function resolveElement(image) {\n      var name = image.getAttribute('usemap').slice(1);\n      return maps.getAreasFor(name);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}