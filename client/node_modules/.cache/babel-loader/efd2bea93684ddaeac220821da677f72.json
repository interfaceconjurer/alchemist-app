{"ast":null,"code":"// https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute\n// https://www.w3.org/WAI/PF/aria-practices/#keyboard\nimport queryTabbable from './tabbable';\nimport nodeArray from '../util/node-array';\nimport platform from '../util/platform';\nimport sortArea from './tabsequence.sort-area';\nimport sortShadowed from './tabsequence.sort-shadowed';\nimport sortTabindex from './tabsequence.sort-tabindex';\nimport _supports from '../supports/supports';\nvar supports;\n\nfunction moveContextToBeginning(elements, context) {\n  var pos = elements.indexOf(context);\n\n  if (pos > 0) {\n    var tmp = elements.splice(pos, 1);\n    return tmp.concat(elements);\n  }\n\n  return elements;\n}\n\nfunction sortElements(elements, _context) {\n  if (supports.tabsequenceAreaAtImgPosition) {\n    // Some browsers sort <area> in DOM order, some place the <area>s\n    // where the <img> referecing them would've been in DOM order.\n    // https://github.com/medialize/ally.js/issues/5\n    elements = sortArea(elements, _context);\n  }\n\n  elements = sortTabindex(elements);\n  return elements;\n}\n\nexport default function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      includeContext = _ref.includeContext,\n      includeOnlyTabbable = _ref.includeOnlyTabbable,\n      strategy = _ref.strategy;\n\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var _context = nodeArray(context)[0] || document.documentElement;\n\n  var elements = queryTabbable({\n    context: _context,\n    includeContext: includeContext,\n    includeOnlyTabbable: includeOnlyTabbable,\n    strategy: strategy\n  });\n\n  if (document.body.createShadowRoot && platform.is.BLINK) {\n    // sort tabindex localized to shadow dom\n    // see https://github.com/medialize/ally.js/issues/6\n    elements = sortShadowed(elements, _context, sortElements);\n  } else {\n    elements = sortElements(elements, _context);\n  }\n\n  if (includeContext) {\n    // if we include the context itself, it has to be the first\n    // element of the sequence\n    elements = moveContextToBeginning(elements, _context);\n  }\n\n  return elements;\n}","map":null,"metadata":{},"sourceType":"module"}