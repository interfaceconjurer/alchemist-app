{"ast":null,"code":"/*\n    Facility to cache test results in localStorage.\n\n    USAGE:\n      cache.get('key');\n      cache.set('key', 'value');\n */\nimport version from '../version';\n\nfunction readLocalStorage(key) {\n  // allow reading from storage to retrieve previous support results\n  // even while the document does not have focus\n  var data;\n\n  try {\n    data = window.localStorage && window.localStorage.getItem(key);\n    data = data ? JSON.parse(data) : {};\n  } catch (e) {\n    data = {};\n  }\n\n  return data;\n}\n\nfunction writeLocalStorage(key, value) {\n  if (!document.hasFocus()) {\n    // if the document does not have focus when tests are executed, focus() may\n    // not be handled properly and events may not be dispatched immediately.\n    // This can happen when a document is reloaded while Developer Tools have focus.\n    try {\n      window.localStorage && window.localStorage.removeItem(key);\n    } catch (e) {// ignore\n    }\n\n    return;\n  }\n\n  try {\n    window.localStorage && window.localStorage.setItem(key, JSON.stringify(value));\n  } catch (e) {// ignore\n  }\n}\n\nvar userAgent = typeof window !== 'undefined' && window.navigator.userAgent || '';\nvar cacheKey = 'ally-supports-cache';\nvar cache = readLocalStorage(cacheKey); // update the cache if ally or the user agent changed (newer version, etc)\n\nif (cache.userAgent !== userAgent || cache.version !== version) {\n  cache = {};\n}\n\ncache.userAgent = userAgent;\ncache.version = version;\nexport default {\n  get: function get() {\n    return cache;\n  },\n  set: function set(values) {\n    Object.keys(values).forEach(function (key) {\n      cache[key] = values[key];\n    });\n    cache.time = new Date().toISOString();\n    writeLocalStorage(cacheKey, cache);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}