{"ast":null,"code":"var getDefaultSettings = function getDefaultSettings() {\n  return {\n    elements_selector: \"img\",\n    container: window,\n    threshold: 300,\n    throttle: 150,\n    data_src: \"src\",\n    data_srcset: \"srcset\",\n    data_sizes: \"sizes\",\n    data_bg: \"bg\",\n    class_loading: \"loading\",\n    class_loaded: \"loaded\",\n    class_error: \"error\",\n    class_initial: \"initial\",\n    skip_invisible: true,\n    callback_load: null,\n    callback_error: null,\n    callback_set: null,\n    callback_enter: null,\n    callback_finish: null,\n    to_webp: false\n  };\n};\n\nvar dataPrefix = \"data-\";\nvar processedDataName = \"was-processed\";\nvar processedDataValue = \"true\";\n\nvar getData = function getData(element, attribute) {\n  return element.getAttribute(dataPrefix + attribute);\n};\n\nvar setData = function setData(element, attribute, value) {\n  var attrName = dataPrefix + attribute;\n\n  if (value === null) {\n    element.removeAttribute(attrName);\n    return;\n  }\n\n  element.setAttribute(attrName, value);\n};\n\nvar setWasProcessedData = function setWasProcessedData(element) {\n  return setData(element, processedDataName, processedDataValue);\n};\n\nvar getWasProcessedData = function getWasProcessedData(element) {\n  return getData(element, processedDataName) === processedDataValue;\n};\n\nvar purgeProcessedElements = function purgeProcessedElements(elements) {\n  return elements.filter(function (element) {\n    return !getWasProcessedData(element);\n  });\n};\n\nvar purgeOneElement = function purgeOneElement(elements, elementToPurge) {\n  return elements.filter(function (element) {\n    return element !== elementToPurge;\n  });\n};\n\nvar getTopOffset = function getTopOffset(element) {\n  return element.getBoundingClientRect().top + window.pageYOffset - element.ownerDocument.documentElement.clientTop;\n};\n\nvar isBelowViewport = function isBelowViewport(element, container, threshold) {\n  var fold = container === window ? window.innerHeight + window.pageYOffset : getTopOffset(container) + container.offsetHeight;\n  return fold <= getTopOffset(element) - threshold;\n};\n\nvar getLeftOffset = function getLeftOffset(element) {\n  return element.getBoundingClientRect().left + window.pageXOffset - element.ownerDocument.documentElement.clientLeft;\n};\n\nvar isAtRightOfViewport = function isAtRightOfViewport(element, container, threshold) {\n  var documentWidth = window.innerWidth;\n  var fold = container === window ? documentWidth + window.pageXOffset : getLeftOffset(container) + documentWidth;\n  return fold <= getLeftOffset(element) - threshold;\n};\n\nvar isAboveViewport = function isAboveViewport(element, container, threshold) {\n  var fold = container === window ? window.pageYOffset : getTopOffset(container);\n  return fold >= getTopOffset(element) + threshold + element.offsetHeight;\n};\n\nvar isAtLeftOfViewport = function isAtLeftOfViewport(element, container, threshold) {\n  var fold = container === window ? window.pageXOffset : getLeftOffset(container);\n  return fold >= getLeftOffset(element) + threshold + element.offsetWidth;\n};\n\nfunction isInsideViewport(element, container, threshold) {\n  return !isBelowViewport(element, container, threshold) && !isAboveViewport(element, container, threshold) && !isAtRightOfViewport(element, container, threshold) && !isAtLeftOfViewport(element, container, threshold);\n}\n/* Creates instance and notifies it through the window element */\n\n\nvar createInstance = function createInstance(classObj, options) {\n  var event;\n  var eventString = \"LazyLoad::Initialized\";\n  var instance = new classObj(options);\n\n  try {\n    // Works in modern browsers\n    event = new CustomEvent(eventString, {\n      detail: {\n        instance: instance\n      }\n    });\n  } catch (err) {\n    // Works in Internet Explorer (all versions)\n    event = document.createEvent(\"CustomEvent\");\n    event.initCustomEvent(eventString, false, false, {\n      instance: instance\n    });\n  }\n\n  window.dispatchEvent(event);\n};\n/* Auto initialization of one or more instances of lazyload, depending on the \n    options passed in (plain object or an array) */\n\n\nfunction autoInitialize(classObj, options) {\n  if (!options) {\n    return;\n  }\n\n  if (!options.length) {\n    // Plain object\n    createInstance(classObj, options);\n  } else {\n    // Array of objects\n    for (var i = 0, optionsItem; optionsItem = options[i]; i += 1) {\n      createInstance(classObj, optionsItem);\n    }\n  }\n}\n\nvar replaceExtToWebp = function replaceExtToWebp(value, condition) {\n  return condition ? value.replace(/\\.(jpe?g|png)/gi, \".webp\") : value;\n};\n\nvar detectWebp = function detectWebp() {\n  var webpString = \"image/webp\";\n  var canvas = document.createElement(\"canvas\");\n\n  if (canvas.getContext && canvas.getContext(\"2d\")) {\n    return canvas.toDataURL(webpString).indexOf(\"data:\".concat(webpString)) === 0;\n  }\n\n  return false;\n};\n\nvar runningOnBrowser = typeof window !== \"undefined\";\nvar isBot = runningOnBrowser && !(\"onscroll\" in window) || /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent);\nvar supportsClassList = runningOnBrowser && \"classList\" in document.createElement(\"p\");\nvar supportsWebp = runningOnBrowser && detectWebp();\n\nvar addClass = function addClass(element, className) {\n  if (supportsClassList) {\n    element.classList.add(className);\n    return;\n  }\n\n  element.className += (element.className ? \" \" : \"\") + className;\n};\n\nvar removeClass = function removeClass(element, className) {\n  if (supportsClassList) {\n    element.classList.remove(className);\n    return;\n  }\n\n  element.className = element.className.replace(new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\"), \" \").replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n};\n\nvar setSourcesInChildren = function setSourcesInChildren(parentTag, attrName, dataAttrName, toWebpFlag) {\n  for (var i = 0, childTag; childTag = parentTag.children[i]; i += 1) {\n    if (childTag.tagName === \"SOURCE\") {\n      var attrValue = getData(childTag, dataAttrName);\n      setAttributeIfValue(childTag, attrName, attrValue, toWebpFlag);\n    }\n  }\n};\n\nvar setAttributeIfValue = function setAttributeIfValue(element, attrName, value, toWebpFlag) {\n  if (!value) {\n    return;\n  }\n\n  element.setAttribute(attrName, replaceExtToWebp(value, toWebpFlag));\n};\n\nvar setSourcesImg = function setSourcesImg(element, settings) {\n  var toWebpFlag = supportsWebp && settings.to_webp;\n  var srcsetDataName = settings.data_srcset;\n  var parent = element.parentNode;\n\n  if (parent && parent.tagName === \"PICTURE\") {\n    setSourcesInChildren(parent, \"srcset\", srcsetDataName, toWebpFlag);\n  }\n\n  var sizesDataValue = getData(element, settings.data_sizes);\n  setAttributeIfValue(element, \"sizes\", sizesDataValue);\n  var srcsetDataValue = getData(element, srcsetDataName);\n  setAttributeIfValue(element, \"srcset\", srcsetDataValue, toWebpFlag);\n  var srcDataValue = getData(element, settings.data_src);\n  setAttributeIfValue(element, \"src\", srcDataValue, toWebpFlag);\n};\n\nvar setSourcesIframe = function setSourcesIframe(element, settings) {\n  var srcDataValue = getData(element, settings.data_src);\n  setAttributeIfValue(element, \"src\", srcDataValue);\n};\n\nvar setSourcesVideo = function setSourcesVideo(element, settings) {\n  var srcDataName = settings.data_src;\n  var srcDataValue = getData(element, srcDataName);\n  setSourcesInChildren(element, \"src\", srcDataName);\n  setAttributeIfValue(element, \"src\", srcDataValue);\n  element.load();\n};\n\nvar setSourcesBgImage = function setSourcesBgImage(element, settings) {\n  var toWebpFlag = supportsWebp && settings.to_webp;\n  var srcDataValue = getData(element, settings.data_src);\n  var bgDataValue = getData(element, settings.data_bg);\n\n  if (srcDataValue) {\n    var setValue = replaceExtToWebp(srcDataValue, toWebpFlag);\n    element.style.backgroundImage = \"url(\\\"\".concat(setValue, \"\\\")\");\n  }\n\n  if (bgDataValue) {\n    var _setValue = replaceExtToWebp(bgDataValue, toWebpFlag);\n\n    element.style.backgroundImage = _setValue;\n  }\n};\n\nvar setSourcesFunctions = {\n  IMG: setSourcesImg,\n  IFRAME: setSourcesIframe,\n  VIDEO: setSourcesVideo\n};\n\nvar setSources = function setSources(element, instance) {\n  var settings = instance._settings;\n  var tagName = element.tagName;\n  var setSourcesFunction = setSourcesFunctions[tagName];\n\n  if (setSourcesFunction) {\n    setSourcesFunction(element, settings);\n\n    instance._updateLoadingCount(1);\n\n    instance._elements = purgeOneElement(instance._elements, element);\n    return;\n  }\n\n  setSourcesBgImage(element, settings);\n};\n\nvar callbackIfSet = function callbackIfSet(callback, argument) {\n  if (callback) {\n    callback(argument);\n  }\n};\n\nvar genericLoadEventName = \"load\";\nvar mediaLoadEventName = \"loadeddata\";\nvar errorEventName = \"error\";\n\nvar addEventListener = function addEventListener(element, eventName, handler) {\n  element.addEventListener(eventName, handler);\n};\n\nvar removeEventListener = function removeEventListener(element, eventName, handler) {\n  element.removeEventListener(eventName, handler);\n};\n\nvar addAllEventListeners = function addAllEventListeners(element, loadHandler, errorHandler) {\n  addEventListener(element, genericLoadEventName, loadHandler);\n  addEventListener(element, mediaLoadEventName, loadHandler);\n  addEventListener(element, errorEventName, errorHandler);\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(element, loadHandler, errorHandler) {\n  removeEventListener(element, genericLoadEventName, loadHandler);\n  removeEventListener(element, mediaLoadEventName, loadHandler);\n  removeEventListener(element, errorEventName, errorHandler);\n};\n\nvar eventHandler = function eventHandler(event, success, instance) {\n  var settings = instance._settings;\n  var className = success ? settings.class_loaded : settings.class_error;\n  var callback = success ? settings.callback_load : settings.callback_error;\n  var element = event.target;\n  removeClass(element, settings.class_loading);\n  addClass(element, className);\n  callbackIfSet(callback, element);\n\n  instance._updateLoadingCount(-1);\n};\n\nvar addOneShotEventListeners = function addOneShotEventListeners(element, instance) {\n  var loadHandler = function loadHandler(event) {\n    eventHandler(event, true, instance);\n    removeAllEventListeners(element, loadHandler, errorHandler);\n  };\n\n  var errorHandler = function errorHandler(event) {\n    eventHandler(event, false, instance);\n    removeAllEventListeners(element, loadHandler, errorHandler);\n  };\n\n  addAllEventListeners(element, loadHandler, errorHandler);\n};\n\nvar managedTags = [\"IMG\", \"IFRAME\", \"VIDEO\"];\n\nfunction revealElement(element, instance, force) {\n  var settings = instance._settings;\n\n  if (!force && getWasProcessedData(element)) {\n    return; // element has already been processed and force wasn't true\n  }\n\n  callbackIfSet(settings.callback_enter, element);\n\n  if (managedTags.indexOf(element.tagName) > -1) {\n    addOneShotEventListeners(element, instance);\n    addClass(element, settings.class_loading);\n  }\n\n  setSources(element, instance);\n  setWasProcessedData(element);\n  callbackIfSet(settings.callback_set, element);\n}\n\nvar removeFromArray = function removeFromArray(elements, indexes) {\n  while (indexes.length) {\n    elements.splice(indexes.pop(), 1);\n  }\n};\n/*\n * Constructor\n */\n\n\nvar LazyLoad = function LazyLoad(instanceSettings) {\n  this._settings = Object.assign({}, getDefaultSettings(), instanceSettings);\n  this._loadingCount = 0;\n  this._queryOriginNode = this._settings.container === window ? document : this._settings.container;\n  this._previousLoopTime = 0;\n  this._loopTimeout = null;\n  this._boundHandleScroll = this.handleScroll.bind(this);\n  this._isFirstLoop = true;\n  window.addEventListener(\"resize\", this._boundHandleScroll);\n  this.update();\n};\n\nLazyLoad.prototype = {\n  _loopThroughElements: function _loopThroughElements(forceDownload) {\n    var settings = this._settings,\n        elements = this._elements,\n        elementsLength = !elements ? 0 : elements.length;\n    var i,\n        processedIndexes = [],\n        isFirstLoop = this._isFirstLoop;\n\n    if (isFirstLoop) {\n      this._isFirstLoop = false;\n    }\n\n    if (elementsLength === 0) {\n      this._stopScrollHandler();\n\n      return;\n    }\n\n    for (i = 0; i < elementsLength; i++) {\n      var element = elements[i];\n      /* If must skip_invisible and element is invisible, skip it */\n\n      if (settings.skip_invisible && element.offsetParent === null) {\n        continue;\n      }\n\n      if (forceDownload || isInsideViewport(element, settings.container, settings.threshold)) {\n        if (isFirstLoop) {\n          addClass(element, settings.class_initial);\n        }\n\n        this.load(element);\n        processedIndexes.push(i);\n      }\n    } // Removing processed elements from this._elements.\n\n\n    removeFromArray(elements, processedIndexes);\n  },\n  _startScrollHandler: function _startScrollHandler() {\n    if (!this._isHandlingScroll) {\n      this._isHandlingScroll = true;\n\n      this._settings.container.addEventListener(\"scroll\", this._boundHandleScroll);\n    }\n  },\n  _stopScrollHandler: function _stopScrollHandler() {\n    if (this._isHandlingScroll) {\n      this._isHandlingScroll = false;\n\n      this._settings.container.removeEventListener(\"scroll\", this._boundHandleScroll);\n    }\n  },\n  _updateLoadingCount: function _updateLoadingCount(plusMinus) {\n    this._loadingCount += plusMinus;\n\n    if (this._elements.length === 0 && this._loadingCount === 0) {\n      callbackIfSet(this._settings.callback_finish);\n    }\n  },\n  handleScroll: function handleScroll() {\n    var throttle = this._settings.throttle;\n\n    if (throttle !== 0) {\n      var now = Date.now();\n      var remainingTime = throttle - (now - this._previousLoopTime);\n\n      if (remainingTime <= 0 || remainingTime > throttle) {\n        if (this._loopTimeout) {\n          clearTimeout(this._loopTimeout);\n          this._loopTimeout = null;\n        }\n\n        this._previousLoopTime = now;\n\n        this._loopThroughElements();\n      } else if (!this._loopTimeout) {\n        this._loopTimeout = setTimeout(function () {\n          this._previousLoopTime = Date.now();\n          this._loopTimeout = null;\n\n          this._loopThroughElements();\n        }.bind(this), remainingTime);\n      }\n    } else {\n      this._loopThroughElements();\n    }\n  },\n  loadAll: function loadAll() {\n    this._loopThroughElements(true);\n  },\n  update: function update(elements) {\n    var settings = this._settings;\n\n    var nodeSet = elements || this._queryOriginNode.querySelectorAll(settings.elements_selector);\n\n    this._elements = purgeProcessedElements(Array.prototype.slice.call(nodeSet) // NOTE: nodeset to array for IE compatibility\n    );\n\n    if (isBot) {\n      this.loadAll();\n      return;\n    }\n\n    this._loopThroughElements();\n\n    this._startScrollHandler();\n  },\n  destroy: function destroy() {\n    window.removeEventListener(\"resize\", this._boundHandleScroll);\n\n    if (this._loopTimeout) {\n      clearTimeout(this._loopTimeout);\n      this._loopTimeout = null;\n    }\n\n    this._stopScrollHandler();\n\n    this._elements = null;\n    this._queryOriginNode = null;\n    this._settings = null;\n  },\n  load: function load(element, force) {\n    revealElement(element, this, force);\n  }\n};\n/* Automatic instances creation if required (useful for async script loading) */\n\nif (runningOnBrowser) {\n  autoInitialize(LazyLoad, window.lazyLoadOptions);\n}\n\nexport default LazyLoad;","map":null,"metadata":{},"sourceType":"module"}