{"ast":null,"code":"import platform from '../util/platform';\n\nfunction before() {\n  var data = {\n    // remember what had focus to restore after test\n    activeElement: document.activeElement,\n    // remember scroll positions to restore after test\n    windowScrollTop: window.scrollTop,\n    windowScrollLeft: window.scrollLeft,\n    bodyScrollTop: document.body.scrollTop,\n    bodyScrollLeft: document.body.scrollLeft\n  }; // wrap tests in an element hidden from screen readers to prevent them\n  // from announcing focus, which can be quite irritating to the user\n\n  var iframe = document.createElement('iframe');\n  iframe.setAttribute('style', 'position:absolute; position:fixed; top:0; left:-2px; width:1px; height:1px; overflow:hidden;');\n  iframe.setAttribute('aria-live', 'off');\n  iframe.setAttribute('aria-busy', 'true');\n  iframe.setAttribute('aria-hidden', 'true');\n  document.body.appendChild(iframe);\n  var _window = iframe.contentWindow;\n  var _document = _window.document;\n\n  _document.open();\n\n  _document.close();\n\n  var wrapper = _document.createElement('div');\n\n  _document.body.appendChild(wrapper);\n\n  data.iframe = iframe;\n  data.wrapper = wrapper;\n  data.window = _window;\n  data.document = _document;\n  return data;\n} // options.element:\n//  {string} element name\n//  {function} callback(wrapper, document) to generate an element\n// options.mutate: (optional)\n//  {function} callback(element, wrapper, document) to manipulate element prior to focus-test.\n//             Can return DOMElement to define focus target (default: element)\n// options.validate: (optional)\n//  {function} callback(element, focusTarget, document) to manipulate test-result\n\n\nfunction test(data, options) {\n  // make sure we operate on a clean slate\n  data.wrapper.innerHTML = ''; // create dummy element to test focusability of\n\n  var element = typeof options.element === 'string' ? data.document.createElement(options.element) : options.element(data.wrapper, data.document); // allow callback to further specify dummy element\n  // and optionally define element to focus\n\n  var focus = options.mutate && options.mutate(element, data.wrapper, data.document);\n\n  if (!focus && focus !== false) {\n    focus = element;\n  } // element needs to be part of the DOM to be focusable\n\n\n  !element.parentNode && data.wrapper.appendChild(element); // test if the element with invalid tabindex can be focused\n\n  focus && focus.focus && focus.focus(); // validate test's result\n\n  return options.validate ? options.validate(element, focus, data.document) : data.document.activeElement === focus;\n}\n\nfunction after(data) {\n  // restore focus to what it was before test and cleanup\n  if (data.activeElement === document.body) {\n    document.activeElement && document.activeElement.blur && document.activeElement.blur();\n\n    if (platform.is.IE10) {\n      // IE10 does not redirect focus to <body> when the activeElement is removed\n      document.body.focus();\n    }\n  } else {\n    data.activeElement && data.activeElement.focus && data.activeElement.focus();\n  }\n\n  document.body.removeChild(data.iframe); // restore scroll position\n\n  window.scrollTop = data.windowScrollTop;\n  window.scrollLeft = data.windowScrollLeft;\n  document.body.scrollTop = data.bodyScrollTop;\n  document.body.scrollLeft = data.bodyScrollLeft;\n}\n\nexport default function (tests) {\n  var data = before();\n  var results = {};\n  Object.keys(tests).map(function (key) {\n    results[key] = test(data, tests[key]);\n  });\n  after(data);\n  return results;\n}","map":null,"metadata":{},"sourceType":"module"}