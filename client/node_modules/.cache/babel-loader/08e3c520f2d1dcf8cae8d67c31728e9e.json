{"ast":null,"code":"import _classCallCheck from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/j.wright/SF-main-repo/alchemist-app/src/components/lazyImage/vew.js\";\nimport React, { Component } from 'react';\nimport LazyLoad from \"vanilla-lazyload\";\nimport './view.css'; // Only initialize it one time for the entire application\n\nif (!document.lazyLoadInstance) {\n  document.lazyLoadInstance = new LazyLoad({\n    element_selector: \".lazy-load\",\n    load_delay: 1000,\n    threshold: 0,\n    class_loading: \"lazy-loading\",\n    class_loaded: \"lazy-loaded\"\n  });\n}\n\nvar LazyImage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LazyImage, _Component);\n\n  function LazyImage() {\n    _classCallCheck(this, LazyImage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LazyImage).apply(this, arguments));\n  }\n\n  _createClass(LazyImage, [{\n    key: \"componentDidMount\",\n    // Update lazyLoad after first rendering of every image\n    value: function componentDidMount() {\n      document.lazyLoadInstance.update();\n    } // Update lazyLoad after rerendering of every image\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      document.lazyLoadInstance.update();\n    } // Just render the image with data-src\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          src = _this$props.src,\n          onLoad = _this$props.onLoad,\n          alt = _this$props.alt;\n      return React.createElement(\"img\", {\n        ref: this.props.imageElement,\n        onLoad: onLoad,\n        alt: alt,\n        className: \"lazy-load\",\n        \"data-src\": src,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LazyImage;\n}(Component);\n\nexport default LazyImage;","map":{"version":3,"sources":["/Users/j.wright/SF-main-repo/alchemist-app/src/components/lazyImage/vew.js"],"names":["React","Component","LazyLoad","document","lazyLoadInstance","element_selector","load_delay","threshold","class_loading","class_loaded","LazyImage","update","props","src","onLoad","alt","imageElement"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,YAAP,C,CAEA;;AACA,IAAI,CAACC,QAAQ,CAACC,gBAAd,EAAgC;AAC9BD,EAAAA,QAAQ,CAACC,gBAAT,GAA4B,IAAIF,QAAJ,CAAa;AACvCG,IAAAA,gBAAgB,EAAE,YADqB;AAEtCC,IAAAA,UAAU,EAAE,IAF0B;AAGtCC,IAAAA,SAAS,EAAE,CAH2B;AAItCC,IAAAA,aAAa,EAAE,cAJuB;AAKtCC,IAAAA,YAAY,EAAE;AALwB,GAAb,CAA5B;AAOD;;IAEKC,S;;;;;;;;;;;;;AACJ;wCACoB;AAClBP,MAAAA,QAAQ,CAACC,gBAAT,CAA0BO,MAA1B;AACD,K,CAED;;;;yCACqB;AACnBR,MAAAA,QAAQ,CAACC,gBAAT,CAA0BO,MAA1B;AACD,K,CAED;;;;6BACS;AAAA,wBACoB,KAAKC,KADzB;AAAA,UACAC,GADA,eACAA,GADA;AAAA,UACKC,MADL,eACKA,MADL;AAAA,UACaC,GADb,eACaA,GADb;AAEP,aACE;AACE,QAAA,GAAG,EAAE,KAAKH,KAAL,CAAWI,YADlB;AAEE,QAAA,MAAM,EAAEF,MAFV;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,SAAS,EAAC,WAJZ;AAKE,oBAAUF,GALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;;;EAvBqBZ,S;;AA0BxB,eAAeS,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport LazyLoad from \"vanilla-lazyload\";\nimport './view.css';\n\n// Only initialize it one time for the entire application\nif (!document.lazyLoadInstance) {\n  document.lazyLoadInstance = new LazyLoad({\n    element_selector: \".lazy-load\",\n     load_delay: 1000,\n     threshold: 0,\n     class_loading: \"lazy-loading\",\n     class_loaded: \"lazy-loaded\"\n    });\n}\n\nclass LazyImage extends Component {\n  // Update lazyLoad after first rendering of every image\n  componentDidMount() {\n    document.lazyLoadInstance.update();\n  }\n\n  // Update lazyLoad after rerendering of every image\n  componentDidUpdate() {\n    document.lazyLoadInstance.update();\n  }\n\n  // Just render the image with data-src\n  render() {\n    const {src, onLoad, alt} = this.props;\n    return (\n      <img\n        ref={this.props.imageElement}\n        onLoad={onLoad}\n        alt={alt}\n        className=\"lazy-load\"\n        data-src={src}\n      />\n    );\n  }\n}\n\nexport default LazyImage;"]},"metadata":{},"sourceType":"module"}