{"ast":null,"code":"// Determine if an element is disabled (i.e. not editable)\nimport contextToElement from '../util/context-to-element';\nimport getParents from '../get/parents';\nimport isNativeDisabledSupported from './native-disabled-supported';\nimport _supports from '../supports/supports';\nvar supports;\n\nfunction isDisabledFieldset(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'fieldset' && element.disabled;\n}\n\nfunction isDisabledForm(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'form' && element.disabled;\n}\n\nexport default function (context) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var element = contextToElement({\n    label: 'is/disabled',\n    context: context\n  });\n\n  if (element.hasAttribute('data-ally-disabled')) {\n    // treat ally's element/disabled like the DOM native element.disabled\n    return true;\n  }\n\n  if (!isNativeDisabledSupported(element)) {\n    // non-form elements do not support the disabled attribute\n    return false;\n  }\n\n  if (element.disabled) {\n    // the element itself is disabled\n    return true;\n  }\n\n  var parents = getParents({\n    context: element\n  });\n\n  if (parents.some(isDisabledFieldset)) {\n    // a parental <fieldset> is disabld and inherits the state onto this element\n    return true;\n  }\n\n  if (!supports.focusFormDisabled && parents.some(isDisabledForm)) {\n    // a parental <form> is disabld and inherits the state onto this element\n    return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}