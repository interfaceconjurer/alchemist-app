{"ast":null,"code":"// https://www.w3.org/TR/html5/editing.html#focusable\n// https://www.w3.org/WAI/PF/aria-practices/#keyboard\nimport isFocusable from '../is/focusable';\nimport isFocusRelevant from '../is/focus-relevant';\nimport getDocument from '../util/get-document';\n\nfunction createFilter(condition) {\n  // see https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter\n  var filter = function filter(node) {\n    if (node.shadowRoot) {\n      // return ShadowRoot elements regardless of them being focusable,\n      // so they can be walked recursively later\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    if (condition(node)) {\n      // finds elements that could have been found by document.querySelectorAll()\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    return NodeFilter.FILTER_SKIP;\n  }; // IE requires a function, Browsers require {acceptNode: function}\n  // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm\n\n\n  filter.acceptNode = filter;\n  return filter;\n}\n\nvar PossiblyFocusableFilter = createFilter(isFocusRelevant);\nexport default function queryFocusableStrict() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      includeContext = _ref.includeContext,\n      includeOnlyTabbable = _ref.includeOnlyTabbable,\n      strategy = _ref.strategy;\n\n  if (!context) {\n    context = document.documentElement;\n  }\n\n  var _isFocusable = isFocusable.rules.except({\n    onlyTabbable: includeOnlyTabbable\n  });\n\n  var _document = getDocument(context); // see https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker\n\n\n  var walker = _document.createTreeWalker( // root element to start search in\n  context, // element type filter\n  NodeFilter.SHOW_ELEMENT, // custom NodeFilter filter\n  strategy === 'all' ? PossiblyFocusableFilter : createFilter(_isFocusable), // deprecated, but IE requires it\n  false);\n\n  var list = [];\n\n  while (walker.nextNode()) {\n    if (walker.currentNode.shadowRoot) {\n      if (_isFocusable(walker.currentNode)) {\n        list.push(walker.currentNode);\n      }\n\n      list = list.concat(queryFocusableStrict({\n        context: walker.currentNode.shadowRoot,\n        includeOnlyTabbable: includeOnlyTabbable,\n        strategy: strategy\n      }));\n    } else {\n      list.push(walker.currentNode);\n    }\n  } // add context if requested and focusable\n\n\n  if (includeContext) {\n    if (strategy === 'all') {\n      if (isFocusRelevant(context)) {\n        list.unshift(context);\n      }\n    } else if (_isFocusable(context)) {\n      list.unshift(context);\n    }\n  }\n\n  return list;\n}","map":null,"metadata":{},"sourceType":"module"}