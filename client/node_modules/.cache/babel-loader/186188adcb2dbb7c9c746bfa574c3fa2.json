{"ast":null,"code":"import _regeneratorRuntime from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/j.wright/SF-main-repo/alchemist-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/j.wright/SF-main-repo/alchemist-app/src/components/workLayout/mediator.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router\";\nimport View from './view';\nimport WorkItem from '../workItem/workItem';\nimport workItemAPI from '../../workItemAPI';\n\nvar WorkLayout =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WorkLayout, _Component);\n\n  function WorkLayout() {\n    var _this;\n\n    _classCallCheck(this, WorkLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorkLayout).call(this));\n\n    _this.handleClick = function (workItem) {\n      _this.props.history.push({\n        pathname: \"/workItem/\".concat(workItem.id)\n      });\n    };\n\n    _this.state = {\n      data: ''\n    };\n    return _this;\n  }\n\n  _createClass(WorkLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var resolveAPIPromise =\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return workItemAPI.getAllWorkItems();\n\n                case 2:\n                  data = _context.sent;\n\n                  _this2.setState({\n                    data: data\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function resolveAPIPromise() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      resolveAPIPromise();\n    }\n  }, {\n    key: \"getWorkItems\",\n    value: function getWorkItems() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var allWork = Object.keys(data).map(function (workItem) {\n        // check for the highest pixel density \n        // display available\n        var imageHighPixDens = data[workItem].images.hidpi ? data[workItem].images.hidpi : data[workItem].images.normal;\n        var stillImageFromGif;\n        var animatedGif;\n\n        if (data[workItem].animated === true) {\n          // if you have an animation, see if i still image \n          // is available for default state\n          stillImageFromGif = data[workItem].attachments.length > 0 ? data[workItem].attachments[0].url : \"\";\n          animatedGif = imageHighPixDens;\n        } // if you have a still from a gif, use that, \n        // otherwise use the highest quality image\n\n\n        var imageSrc = stillImageFromGif ? stillImageFromGif : imageHighPixDens;\n        return React.createElement(WorkItem, {\n          key: workItem.toString(),\n          workItemClick: _this3.handleClick,\n          stillImage: stillImageFromGif,\n          animatedGif: animatedGif,\n          workItem: data[workItem],\n          imageSrc: imageSrc,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      });\n      return allWork;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        workItems: this.getWorkItems(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return WorkLayout;\n}(Component);\n\nexport default withRouter(WorkLayout);","map":{"version":3,"sources":["/Users/j.wright/SF-main-repo/alchemist-app/src/components/workLayout/mediator.js"],"names":["React","Component","withRouter","View","WorkItem","workItemAPI","WorkLayout","handleClick","workItem","props","history","push","pathname","id","state","data","resolveAPIPromise","getAllWorkItems","setState","allWork","Object","keys","map","imageHighPixDens","images","hidpi","normal","stillImageFromGif","animatedGif","animated","attachments","length","url","imageSrc","toString","getWorkItems"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;IAEMC,U;;;;;AACJ,wBAAc;AAAA;;AAAA;;AACZ;;AADY,UAiBdC,WAjBc,GAiBA,UAACC,QAAD,EAAc;AAC1B,YAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,QAAAA,QAAQ,sBAAeJ,QAAQ,CAACK,EAAxB;AADc,OAAxB;AAGD,KArBa;;AAEZ,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAFY;AAKb;;;;wCAEmB;AAAA;;AAClB,UAAMC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACPX,WAAW,CAACY,eAAZ,EADO;;AAAA;AACpBF,kBAAAA,IADoB;;AAExB,kBAAA,MAAI,CAACG,QAAL,CAAc;AACZH,oBAAAA,IAAI,EAAEA;AADM,mBAAd;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAAjBC,iBAAiB;AAAA;AAAA;AAAA,SAAvB;;AAMAA,MAAAA,iBAAiB;AAClB;;;mCAQa;AAAA;;AACZ,UAAMD,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,UAAMI,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAsB,UAACd,QAAD,EAAc;AAClD;AACA;AACA,YAAIe,gBAAgB,GAAGR,IAAI,CAACP,QAAD,CAAJ,CAAegB,MAAf,CAAsBC,KAAtB,GAA8BV,IAAI,CAACP,QAAD,CAAJ,CAAegB,MAAf,CAAsBC,KAApD,GAA4DV,IAAI,CAACP,QAAD,CAAJ,CAAegB,MAAf,CAAsBE,MAAzG;AACA,YAAIC,iBAAJ;AACA,YAAIC,WAAJ;;AACA,YAAGb,IAAI,CAACP,QAAD,CAAJ,CAAeqB,QAAf,KAA4B,IAA/B,EAAoC;AAClC;AACA;AACAF,UAAAA,iBAAiB,GAAGZ,IAAI,CAACP,QAAD,CAAJ,CAAesB,WAAf,CAA2BC,MAA3B,GAAoC,CAApC,GAAwChB,IAAI,CAACP,QAAD,CAAJ,CAAesB,WAAf,CAA2B,CAA3B,EAA8BE,GAAtE,GAA4E,EAAhG;AACAJ,UAAAA,WAAW,GAAGL,gBAAd;AACD,SAXiD,CAYlD;AACA;;;AACA,YAAIU,QAAQ,GAAGN,iBAAiB,GAAGA,iBAAH,GAAuBJ,gBAAvD;AACA,eAAO,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEf,QAAQ,CAAC0B,QAAT,EAAf;AAAoC,UAAA,aAAa,EAAE,MAAI,CAAC3B,WAAxD;AAAqE,UAAA,UAAU,EAAEoB,iBAAjF;AAAoG,UAAA,WAAW,EAAEC,WAAjH;AAA8H,UAAA,QAAQ,EAAEb,IAAI,CAACP,QAAD,CAA5I;AAAwJ,UAAA,QAAQ,EAAEyB,QAAlK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAhBe,CAAhB;AAiBA,aAAOd,OAAP;AACH;;;6BACU;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAE,KAAKgB,YAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAjDsBlC,S;;AAoDzB,eAAeC,UAAU,CAACI,UAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from \"react-router\";\nimport View from './view';\nimport WorkItem from '../workItem/workItem';\nimport workItemAPI from '../../workItemAPI';\n\nclass WorkLayout extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: ''\n    }\n  }\n\n  componentDidMount() {\n    const resolveAPIPromise = async () => {\n      let data = await workItemAPI.getAllWorkItems();\n      this.setState({\n        data: data\n      });\n    }\n    resolveAPIPromise();\n  }\n\n  handleClick = (workItem) => {\n    this.props.history.push({\n      pathname: `/workItem/${workItem.id}`\n    });\n  }\n\n  getWorkItems(){\n    const data = this.state.data;\n    const allWork = Object.keys(data).map((workItem) => {\n      // check for the highest pixel density \n      // display available\n      let imageHighPixDens = data[workItem].images.hidpi ? data[workItem].images.hidpi : data[workItem].images.normal;\n      let stillImageFromGif;\n      let animatedGif;\n      if(data[workItem].animated === true){\n        // if you have an animation, see if i still image \n        // is available for default state\n        stillImageFromGif = data[workItem].attachments.length > 0 ? data[workItem].attachments[0].url : \"\";\n        animatedGif = imageHighPixDens;\n      }\n      // if you have a still from a gif, use that, \n      // otherwise use the highest quality image\n      let imageSrc = stillImageFromGif ? stillImageFromGif : imageHighPixDens;\n      return <WorkItem key={workItem.toString()} workItemClick={this.handleClick} stillImage={stillImageFromGif} animatedGif={animatedGif} workItem={data[workItem]} imageSrc={imageSrc} />\n    });\n    return allWork;\n}\n  render() {\n    return ( \n      <View workItems={this.getWorkItems()} />\n    );\n  }\n}\n\nexport default withRouter(WorkLayout);"]},"metadata":{},"sourceType":"module"}