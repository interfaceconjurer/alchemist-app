{"ast":null,"code":"import keyBinding from './key.binding';\nimport nodeArray from '../util/node-array';\nimport { getParentComparator } from '../util/compare-position'; // Bug 286933 - Key events in the autocomplete popup should be hidden from page scripts\n// @browser-issue Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=286933\n\nexport default function () {\n  var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var bindings = {};\n  var context = nodeArray(map.context)[0] || document.documentElement;\n  delete map.context;\n  var filter = nodeArray(map.filter);\n  delete map.filter;\n  var mapKeys = Object.keys(map);\n\n  if (!mapKeys.length) {\n    throw new TypeError('when/key requires at least one option key');\n  }\n\n  var registerBinding = function registerBinding(event) {\n    event.keyCodes.forEach(function (code) {\n      if (!bindings[code]) {\n        bindings[code] = [];\n      }\n\n      bindings[code].push(event);\n    });\n  };\n\n  mapKeys.forEach(function (text) {\n    if (typeof map[text] !== 'function') {\n      throw new TypeError('when/key requires option[\"' + text + '\"] to be a function');\n    }\n\n    var addCallback = function addCallback(event) {\n      event.callback = map[text];\n      return event;\n    };\n\n    keyBinding(text).map(addCallback).forEach(registerBinding);\n  });\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (filter.length) {\n      // ignore elements within the exempted sub-trees\n      var isParentOfElement = getParentComparator({\n        element: event.target,\n        includeSelf: true\n      });\n\n      if (filter.some(isParentOfElement)) {\n        return;\n      }\n    }\n\n    var key = event.keyCode || event.which;\n\n    if (!bindings[key]) {\n      return;\n    }\n\n    bindings[key].forEach(function (_event) {\n      if (!_event.matchModifiers(event)) {\n        return;\n      }\n\n      _event.callback.call(context, event, disengage);\n    });\n  };\n\n  context.addEventListener('keydown', handleKeyDown, false);\n\n  var disengage = function disengage() {\n    context.removeEventListener('keydown', handleKeyDown, false);\n  };\n\n  return {\n    disengage: disengage\n  };\n}","map":null,"metadata":{},"sourceType":"module"}