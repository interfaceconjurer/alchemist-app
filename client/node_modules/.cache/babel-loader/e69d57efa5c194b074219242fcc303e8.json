{"ast":null,"code":"// determine if an element can be focused\n// https://www.w3.org/TR/html5/editing.html#focus-management\n// NOTE: The following known issues exist:\n//   Gecko: `svg a[xlink|href]` is not identified as focusable (because SVGElement.prototype.focus is missing)\n//   Blink, WebKit: SVGElements that have been made focusable by adding a focus event listener are not identified as focusable\nimport isFocusRelevant from './focus-relevant';\nimport isValidArea from './valid-area';\nimport isVisible from './visible';\nimport isDisabled from './disabled';\nimport isOnlyTabbable from './only-tabbable';\nimport contextToElement from '../util/context-to-element';\nimport getFrameElement from '../util/get-frame-element';\nimport tabindexValue from '../util/tabindex-value';\nimport _supports from '../supports/supports';\nvar supports;\n\nfunction isOnlyFocusRelevant(element) {\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName === 'embed' || nodeName === 'keygen') {\n    // embed is considered focus-relevant but not focusable\n    // see https://github.com/medialize/ally.js/issues/82\n    return true;\n  }\n\n  var _tabindex = tabindexValue(element);\n\n  if (element.shadowRoot && _tabindex === null) {\n    // ShadowDOM host elements *may* receive focus\n    // even though they are not considered focuable\n    return true;\n  }\n\n  if (nodeName === 'label') {\n    // <label tabindex=\"0\"> is only tabbable in Firefox, not script-focusable\n    // there's no way to make an element focusable other than by adding a tabindex,\n    // and focus behavior of the label element seems hard-wired to ignore tabindex\n    // in some browsers (like Gecko, Blink and WebKit)\n    return !supports.focusLabelTabindex || _tabindex === null;\n  }\n\n  if (nodeName === 'legend') {\n    return _tabindex === null;\n  }\n\n  if (supports.focusSvgFocusableAttribute && (element.ownerSVGElement || nodeName === 'svg')) {\n    // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2\n    var focusableAttribute = element.getAttribute('focusable');\n    return focusableAttribute && focusableAttribute === 'false';\n  }\n\n  if (nodeName === 'img' && element.hasAttribute('usemap')) {\n    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,\n    // it appears the tabindex is overruled so focus is still forwarded to the <map>\n    return _tabindex === null || !supports.focusImgUsemapTabindex;\n  }\n\n  if (nodeName === 'area') {\n    // all <area>s are considered relevant,\n    // but only the valid <area>s are focusable\n    return !isValidArea(element);\n  }\n\n  return false;\n}\n\nfunction isFocusableRules() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      _ref$except = _ref.except,\n      except = _ref$except === void 0 ? {\n    disabled: false,\n    visible: false,\n    onlyTabbable: false\n  } : _ref$except;\n\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var _isOnlyTabbable = isOnlyTabbable.rules.except({\n    onlyFocusableBrowsingContext: true,\n    visible: except.visible\n  });\n\n  var element = contextToElement({\n    label: 'is/focusable',\n    resolveDocument: true,\n    context: context\n  });\n  var focusRelevant = isFocusRelevant.rules({\n    context: element,\n    except: except\n  });\n\n  if (!focusRelevant || isOnlyFocusRelevant(element)) {\n    return false;\n  }\n\n  if (!except.disabled && isDisabled(element)) {\n    return false;\n  }\n\n  if (!except.onlyTabbable && _isOnlyTabbable(element)) {\n    // some elements may be keyboard focusable, but not script focusable\n    return false;\n  } // elements that are not rendered, cannot be focused\n\n\n  if (!except.visible) {\n    var visibilityOptions = {\n      context: element,\n      except: {}\n    };\n\n    if (supports.focusInHiddenIframe) {\n      // WebKit and Blink can focus content in hidden <iframe> and <object>\n      visibilityOptions.except.browsingContext = true;\n    }\n\n    if (supports.focusObjectSvgHidden) {\n      // Blink allows focusing the object element, even if it has visibility: hidden;\n      // @browser-issue Blink https://code.google.com/p/chromium/issues/detail?id=586191\n      var _nodeName2 = element.nodeName.toLowerCase();\n\n      if (_nodeName2 === 'object') {\n        visibilityOptions.except.cssVisibility = true;\n      }\n    }\n\n    if (!isVisible.rules(visibilityOptions)) {\n      return false;\n    }\n  }\n\n  var frameElement = getFrameElement(element);\n\n  if (frameElement) {\n    var _nodeName = frameElement.nodeName.toLowerCase();\n\n    if (_nodeName === 'object' && !supports.focusInZeroDimensionObject) {\n      if (!frameElement.offsetWidth || !frameElement.offsetHeight) {\n        // WebKit can not focus content in <object> if it doesn't have dimensions\n        return false;\n      }\n    }\n  }\n\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName === 'svg' && supports.focusSvgInIframe && !frameElement && element.getAttribute('tabindex') === null) {\n    return false;\n  }\n\n  return true;\n} // bind exceptions to an iterator callback\n\n\nisFocusableRules.except = function () {\n  var except = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isFocusable = function isFocusable(context) {\n    return isFocusableRules({\n      context: context,\n      except: except\n    });\n  };\n\n  isFocusable.rules = isFocusableRules;\n  return isFocusable;\n}; // provide isFocusRelevant(context) as default iterator callback\n\n\nvar isFocusable = isFocusableRules.except({});\nexport default isFocusable;","map":null,"metadata":{},"sourceType":"module"}