{"ast":null,"code":"import isVisible from './visible';\nimport contextToElement from '../util/context-to-element';\nimport getFrameElement from '../util/get-frame-element';\nimport tabindexValue from '../util/tabindex-value';\nimport platform from '../util/platform';\n\nfunction isOnlyTabbableRules() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      _ref$except = _ref.except,\n      except = _ref$except === void 0 ? {\n    onlyFocusableBrowsingContext: false,\n    visible: false\n  } : _ref$except;\n\n  var element = contextToElement({\n    label: 'is/only-tabbable',\n    resolveDocument: true,\n    context: context\n  });\n\n  if (!except.visible && !isVisible(element)) {\n    return false;\n  }\n\n  if (!except.onlyFocusableBrowsingContext && (platform.is.GECKO || platform.is.TRIDENT || platform.is.EDGE)) {\n    var frameElement = getFrameElement(element);\n\n    if (frameElement) {\n      if (tabindexValue(frameElement) < 0) {\n        // iframe[tabindex=\"-1\"] and object[tabindex=\"-1\"] inherit the\n        // tabbable demotion onto elements of their browsing contexts\n        return false;\n      }\n    }\n  }\n\n  var nodeName = element.nodeName.toLowerCase();\n  var tabindex = tabindexValue(element);\n\n  if (nodeName === 'label' && platform.is.GECKO) {\n    // Firefox cannot focus, but tab to: label[tabindex=0]\n    return tabindex !== null && tabindex >= 0;\n  } // SVG Elements were keyboard focusable but not script focusable before Firefox 51.\n  // Firefox 51 added the focus management DOM API (.focus and .blur) to SVGElement,\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=778654\n\n\n  if (platform.is.GECKO && element.ownerSVGElement && !element.focus) {\n    if (nodeName === 'a' && element.hasAttribute('xlink:href')) {\n      // any focusable child of <svg> cannot be focused, but tabbed to\n      if (platform.is.GECKO) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // bind exceptions to an iterator callback\n\n\nisOnlyTabbableRules.except = function () {\n  var except = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isOnlyTabbable = function isOnlyTabbable(context) {\n    return isOnlyTabbableRules({\n      context: context,\n      except: except\n    });\n  };\n\n  isOnlyTabbable.rules = isOnlyTabbableRules;\n  return isOnlyTabbable;\n}; // provide isOnlyTabbable(context) as default iterator callback\n\n\nvar isOnlyTabbable = isOnlyTabbableRules.except({});\nexport default isOnlyTabbable;","map":null,"metadata":{},"sourceType":"module"}