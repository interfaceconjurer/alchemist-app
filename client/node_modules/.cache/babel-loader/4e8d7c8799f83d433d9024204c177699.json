{"ast":null,"code":"\"use strict\";\n\nvar defaults = {\n  trustProtoHeader: false,\n  trustAzureHeader: false,\n  trustXForwardedHostHeader: false\n};\n/**\n * Apply options\n *\n * @param {Hash} [options]\n * @return {Hash}\n * @api private\n */\n\nfunction applyOptions(options) {\n  var settings = {};\n  options = options || {};\n\n  for (var option in defaults) {\n    settings[option] = options[option] || defaults[option];\n  }\n\n  return settings;\n}\n/**\n * enforceHTTPS\n *\n * @param {Hash} [options]\n * @param {Boolean} [options[trustProtoHeader]=false] - Set to true if the x-forwarded-proto HTTP header should be trusted (e.g. for typical reverse proxy configurations)\n * @param {Boolean} [options[trustAzureHeader]=false] - Set to true if Azure's x-arr-ssl HTTP header should be trusted (only use in Azure environments)\n * @param {Boolean} [options[trustXForwardedHostHeader]=false] - Set to true if the x-forwarded-host HTTP header should be trusted\n * @api public\n */\n\n\nvar enforceHTTPS = function enforceHTTPS(options) {\n  return function (req, res, next) {\n    // Crash on pre-1.0.0-style arguments\n    if (typeof options === 'boolean') {\n      return next(\"express-sslify has changed the way how arguments are treated. Please check the readme.\");\n    }\n\n    options = applyOptions(options); // First, check if directly requested via https\n\n    var isHttps = req.secure; // Second, if the request headers can be trusted (e.g. because they are send\n    // by a proxy), check if x-forward-proto is set to https\n\n    if (!isHttps && options.trustProtoHeader) {\n      isHttps = (req.headers[\"x-forwarded-proto\"] || '').substring(0, 5) === 'https';\n    } // Third, if trustAzureHeader is set, check for Azure's headers\n    // indicating a SSL connection\n\n\n    if (!isHttps && options.trustAzureHeader && req.headers[\"x-arr-ssl\"]) {\n      isHttps = true;\n    }\n\n    if (isHttps) {\n      next();\n    } else {\n      // Only redirect GET methods\n      if (req.method === \"GET\" || req.method === 'HEAD') {\n        var host = options.trustXForwardedHostHeader ? req.headers['x-forwarded-host'] || req.headers.host : req.headers.host;\n        res.redirect(301, \"https://\" + host + req.originalUrl);\n      } else {\n        res.status(403).send(\"Please use HTTPS when submitting data to this server.\");\n      }\n    }\n  };\n};\n\nexports.HTTPS = enforceHTTPS;","map":null,"metadata":{},"sourceType":"script"}