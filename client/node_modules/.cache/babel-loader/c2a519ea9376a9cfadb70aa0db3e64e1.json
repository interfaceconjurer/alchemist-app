{"ast":null,"code":"// determine if an element supports.can be focused by script regardless\n// of the element actually being focusable at the time of execution\n// i.e. <input disabled> is conisdered focus-relevant, but not focusable\nimport getParents from '../get/parents';\nimport contextToElement from '../util/context-to-element';\nimport elementMatches from '../util/element-matches';\nimport tabindexValue from '../util/tabindex-value';\nimport isValidTabindex from './valid-tabindex';\nimport { hasCssOverflowScroll, hasCssDisplayFlex, isScrollableContainer, isUserModifyWritable } from './is.util';\nimport _supports from '../supports/supports';\nvar supports;\n\nfunction isFocusRelevantRules() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      context = _ref.context,\n      _ref$except = _ref.except,\n      except = _ref$except === void 0 ? {\n    flexbox: false,\n    scrollable: false,\n    shadow: false\n  } : _ref$except;\n\n  if (!supports) {\n    supports = _supports();\n  }\n\n  var element = contextToElement({\n    label: 'is/focus-relevant',\n    resolveDocument: true,\n    context: context\n  });\n\n  if (!except.shadow && element.shadowRoot) {\n    // a ShadowDOM host receives focus when the focus moves to its content\n    return true;\n  }\n\n  var nodeName = element.nodeName.toLowerCase();\n\n  if (nodeName === 'input' && element.type === 'hidden') {\n    // input[type=\"hidden\"] supports.cannot be focused\n    return false;\n  }\n\n  if (nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea') {\n    return true;\n  }\n\n  if (nodeName === 'legend' && supports.focusRedirectLegend) {\n    // specifics filtered in is/focusable\n    return true;\n  }\n\n  if (nodeName === 'label') {\n    // specifics filtered in is/focusable\n    return true;\n  }\n\n  if (nodeName === 'area') {\n    // specifics filtered in is/focusable\n    return true;\n  }\n\n  if (nodeName === 'a' && element.hasAttribute('href')) {\n    return true;\n  }\n\n  if (nodeName === 'object' && element.hasAttribute('usemap')) {\n    // object[usemap] is not focusable in any browser\n    return false;\n  }\n\n  if (nodeName === 'object') {\n    var svgType = element.getAttribute('type');\n\n    if (!supports.focusObjectSvg && svgType === 'image/svg+xml') {\n      // object[type=\"image/svg+xml\"] is not focusable in Internet Explorer\n      return false;\n    } else if (!supports.focusObjectSwf && svgType === 'application/x-shockwave-flash') {\n      // object[type=\"application/x-shockwave-flash\"] is not focusable in Internet Explorer 9\n      return false;\n    }\n  }\n\n  if (nodeName === 'iframe' || nodeName === 'object') {\n    // browsing context containers\n    return true;\n  }\n\n  if (nodeName === 'embed' || nodeName === 'keygen') {\n    // embed is considered focus-relevant but not focusable\n    // see https://github.com/medialize/ally.js/issues/82\n    return true;\n  }\n\n  if (element.hasAttribute('contenteditable')) {\n    // also see CSS property user-modify below\n    return true;\n  }\n\n  if (nodeName === 'audio' && (supports.focusAudioWithoutControls || element.hasAttribute('controls'))) {\n    return true;\n  }\n\n  if (nodeName === 'video' && (supports.focusVideoWithoutControls || element.hasAttribute('controls'))) {\n    return true;\n  }\n\n  if (supports.focusSummary && nodeName === 'summary') {\n    return true;\n  }\n\n  var validTabindex = isValidTabindex(element);\n\n  if (nodeName === 'img' && element.hasAttribute('usemap')) {\n    // Gecko, Trident and Edge do not allow an image with an image map and tabindex to be focused,\n    // it appears the tabindex is overruled so focus is still forwarded to the <map>\n    return validTabindex && supports.focusImgUsemapTabindex || supports.focusRedirectImgUsemap;\n  }\n\n  if (supports.focusTable && (nodeName === 'table' || nodeName === 'td')) {\n    // IE10-11 supports.can focus <table> and <td>\n    return true;\n  }\n\n  if (supports.focusFieldset && nodeName === 'fieldset') {\n    // IE10-11 supports.can focus <fieldset>\n    return true;\n  }\n\n  var isSvgElement = nodeName === 'svg';\n  var isSvgContent = element.ownerSVGElement;\n  var focusableAttribute = element.getAttribute('focusable');\n  var tabindex = tabindexValue(element);\n\n  if (nodeName === 'use' && tabindex !== null && !supports.focusSvgUseTabindex) {\n    // <use> cannot be made focusable by adding a tabindex attribute anywhere but Blink and WebKit\n    return false;\n  }\n\n  if (nodeName === 'foreignobject') {\n    // <use> can only be made focusable in Blink and WebKit\n    return tabindex !== null && supports.focusSvgForeignobjectTabindex;\n  }\n\n  if (elementMatches(element, 'svg a') && element.hasAttribute('xlink:href')) {\n    return true;\n  }\n\n  if ((isSvgElement || isSvgContent) && element.focus && !supports.focusSvgNegativeTabindexAttribute && tabindex < 0) {\n    // Firefox 51 and 52 treat any natively tabbable SVG element with\n    // tabindex=\"-1\" as tabbable and everything else as inert\n    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1302340\n    return false;\n  }\n\n  if (isSvgElement) {\n    return validTabindex || supports.focusSvg || supports.focusSvgInIframe // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2\n    || Boolean(supports.focusSvgFocusableAttribute && focusableAttribute && focusableAttribute === 'true');\n  }\n\n  if (isSvgContent) {\n    if (supports.focusSvgTabindexAttribute && validTabindex) {\n      return true;\n    }\n\n    if (supports.focusSvgFocusableAttribute) {\n      // Internet Explorer understands the focusable attribute introduced in SVG Tiny 1.2\n      return focusableAttribute === 'true';\n    }\n  } // https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute\n\n\n  if (validTabindex) {\n    return true;\n  }\n\n  var style = window.getComputedStyle(element, null);\n\n  if (isUserModifyWritable(style)) {\n    return true;\n  }\n\n  if (supports.focusImgIsmap && nodeName === 'img' && element.hasAttribute('ismap')) {\n    // IE10-11 considers the <img> in <a href><img ismap> focusable\n    // https://github.com/medialize/ally.js/issues/20\n    var hasLinkParent = getParents({\n      context: element\n    }).some(function (parent) {\n      return parent.nodeName.toLowerCase() === 'a' && parent.hasAttribute('href');\n    });\n\n    if (hasLinkParent) {\n      return true;\n    }\n  } // https://github.com/medialize/ally.js/issues/21\n\n\n  if (!except.scrollable && supports.focusScrollContainer) {\n    if (supports.focusScrollContainerWithoutOverflow) {\n      // Internet Explorer does will consider the scrollable area focusable\n      // if the element is a <div> or a <span> and it is in fact scrollable,\n      // regardless of the CSS overflow property\n      if (isScrollableContainer(element, nodeName)) {\n        return true;\n      }\n    } else if (hasCssOverflowScroll(style)) {\n      // Firefox requires proper overflow setting, IE does not necessarily\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\n      return true;\n    }\n  }\n\n  if (!except.flexbox && supports.focusFlexboxContainer && hasCssDisplayFlex(style)) {\n    // elements with display:flex are focusable in IE10-11\n    return true;\n  }\n\n  var parent = element.parentElement;\n\n  if (!except.scrollable && parent) {\n    var parentNodeName = parent.nodeName.toLowerCase();\n    var parentStyle = window.getComputedStyle(parent, null);\n\n    if (supports.focusScrollBody && isScrollableContainer(parent, nodeName, parentNodeName, parentStyle)) {\n      // scrollable bodies are focusable Internet Explorer\n      // https://github.com/medialize/ally.js/issues/21\n      return true;\n    } // Children of focusable elements with display:flex are focusable in IE10-11\n\n\n    if (supports.focusChildrenOfFocusableFlexbox) {\n      if (hasCssDisplayFlex(parentStyle)) {\n        return true;\n      }\n    }\n  } // NOTE: elements marked as inert are not focusable,\n  // but that property is not exposed to the DOM\n  // https://www.w3.org/TR/html5/editing.html#inert\n\n\n  return false;\n} // bind exceptions to an iterator callback\n\n\nisFocusRelevantRules.except = function () {\n  var except = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isFocusRelevant = function isFocusRelevant(context) {\n    return isFocusRelevantRules({\n      context: context,\n      except: except\n    });\n  };\n\n  isFocusRelevant.rules = isFocusRelevantRules;\n  return isFocusRelevant;\n}; // provide isFocusRelevant(context) as default iterator callback\n\n\nvar isFocusRelevant = isFocusRelevantRules.except({});\nexport default isFocusRelevant;","map":null,"metadata":{},"sourceType":"module"}